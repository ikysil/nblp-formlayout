/*
 * ColumnRowCustomizer.java
 *
 * Created on January 7, 2005, 1:56 PM
 */

package de.berlios.nblayoutpack.formlayout.customizer;

import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.util.*;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;

import org.openide.explorer.propertysheet.editors.EnhancedCustomPropertyEditor;

import com.jgoodies.forms.layout.*;

import de.berlios.nblayoutpack.formlayout.*;

/**
 *
 * @author  Illya Kysil
 */
public class ColumnRowCustomizer extends JPanel
                                 implements EnhancedCustomPropertyEditor{

  private ColumnRowCustomizerContext context;
  private LayoutTableModel layoutTableModel;
  private Action moveUpAction = new MoveUpAction();
  private Action moveDownAction = new MoveDownAction();

  /** Creates new form ColumnRowCustomizer */
  public ColumnRowCustomizer(ColumnRowCustomizerContext context){
    this.context = context;
    initComponents();
    InputMap im = layoutTable.getInputMap(JComponent.WHEN_FOCUSED);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, KeyEvent.CTRL_DOWN_MASK), "moveUp");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, KeyEvent.CTRL_DOWN_MASK), "moveDown");
    ActionMap actionMap = layoutTable.getActionMap();
    actionMap.put("moveUp", moveUpAction);
    actionMap.put("moveDown", moveDownAction);
    moveUpButton.setAction(moveUpAction);
    moveDownButton.setAction(moveDownAction);
    context.initSpecLabel(specLabel);
    layoutTableModel = new LayoutTableModel();
    layoutTable.setModel(layoutTableModel);
    DefaultTableCellRenderer numberCellRenderer = new DefaultTableCellRenderer();
    numberCellRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
    layoutTable.getColumnModel().getColumn(0).setPreferredWidth(36);
    layoutTable.getColumnModel().getColumn(0).setCellRenderer(numberCellRenderer);
    layoutTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    layoutTable.getSelectionModel().addListSelectionListener(new TableListener());
    updateData();
  }
  
  public Object getPropertyValue() throws java.lang.IllegalStateException{
    return getCustomizerValue();
  }

  protected String getCustomizerValue(){
    String[] data = layoutTableModel.getData();
    StringBuffer sb = new StringBuffer();
    boolean isFirst = true;
    for(int i = 0; i < data.length; i++){
      if(isFirst){
        isFirst = false;
      }
      else{
        sb.append(",");
      }
      sb.append(data[i]);
    }
    return sb.toString();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    specLabel = new javax.swing.JLabel();
    specField = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    layoutTable = new javax.swing.JTable();
    addButton = new javax.swing.JButton();
    deleteButton = new javax.swing.JButton();
    insertBeforeButton = new javax.swing.JButton();
    insertAfterButton = new javax.swing.JButton();
    moveUpButton = new javax.swing.JButton();
    moveDownButton = new javax.swing.JButton();
    mergeUpButton = new javax.swing.JButton();
    mergeDownButton = new javax.swing.JButton();
    
    com.jgoodies.forms.layout.FormLayout _formLayoutInstance = new com.jgoodies.forms.layout.FormLayout("4dlu,250px:grow,8dlu,p,4dlu,p,4dlu", "4dlu,p,4dlu,p,8dlu,p,4dlu,p,8dlu,p,4dlu,p,0:grow,4dlu");
    _formLayoutInstance.setColumnGroups(new int[][]{{4, 6}});
    _formLayoutInstance.setRowGroups(new int[][]{});
    setLayout(_formLayoutInstance);
    
    specLabel.setDisplayedMnemonic('C');
    specLabel.setLabelFor(specField);
    specLabel.setText("Column/row specification:");
    add(specLabel, new com.jgoodies.forms.layout.CellConstraints(2, 2, 5, 1, com.jgoodies.forms.layout.CellConstraints.DEFAULT, com.jgoodies.forms.layout.CellConstraints.DEFAULT, new java.awt.Insets(0, 0, 0, 0)));
    
    specField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        specFieldActionPerformed(evt);
      }
    });
    
    add(specField, new com.jgoodies.forms.layout.CellConstraints(2, 4, 5, 1, com.jgoodies.forms.layout.CellConstraints.DEFAULT, com.jgoodies.forms.layout.CellConstraints.DEFAULT, new java.awt.Insets(0, 0, 0, 0)));
    
    jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    layoutTable.setModel(new javax.swing.table.DefaultTableModel(
    new Object [][] {
      {null, null},
      {null, null}
    },
    new String [] {
      "Title 1", "Title 2"
    }
    ));
    layoutTable.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        layoutTableKeyPressed(evt);
      }
    });
    
    jScrollPane1.setViewportView(layoutTable);
    
    add(jScrollPane1, new com.jgoodies.forms.layout.CellConstraints(2, 6, 1, 8, com.jgoodies.forms.layout.CellConstraints.DEFAULT, com.jgoodies.forms.layout.CellConstraints.DEFAULT, new java.awt.Insets(0, 0, 0, 0)));
    
    addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/berlios/nblayoutpack/formlayout/resources/add.png")));
    addButton.setMnemonic('A');
    addButton.setToolTipText("Add");
    addButton.setFocusable(false);
    addButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    addButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addButtonActionPerformed(evt);
      }
    });
    
    add(addButton, new com.jgoodies.forms.layout.CellConstraints(4, 6, 1, 1, com.jgoodies.forms.layout.CellConstraints.DEFAULT, com.jgoodies.forms.layout.CellConstraints.DEFAULT, new java.awt.Insets(0, 0, 0, 0)));
    
    deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/berlios/nblayoutpack/formlayout/resources/remove.png")));
    deleteButton.setMnemonic('D');
    deleteButton.setToolTipText("Delete");
    deleteButton.setFocusable(false);
    deleteButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        deleteButtonActionPerformed(evt);
      }
    });
    
    add(deleteButton, new com.jgoodies.forms.layout.CellConstraints(4, 8, 1, 1, com.jgoodies.forms.layout.CellConstraints.DEFAULT, com.jgoodies.forms.layout.CellConstraints.TOP, new java.awt.Insets(0, 0, 0, 0)));
    
    insertBeforeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/berlios/nblayoutpack/formlayout/resources/insertbefore.png")));
    insertBeforeButton.setToolTipText("Insert before");
    insertBeforeButton.setFocusable(false);
    insertBeforeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        insertBeforeButtonActionPerformed(evt);
      }
    });
    
    add(insertBeforeButton, new com.jgoodies.forms.layout.CellConstraints(6, 6, 1, 1, com.jgoodies.forms.layout.CellConstraints.DEFAULT, com.jgoodies.forms.layout.CellConstraints.DEFAULT, new java.awt.Insets(0, 0, 0, 0)));
    
    insertAfterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/berlios/nblayoutpack/formlayout/resources/insertafter.png")));
    insertAfterButton.setToolTipText("Insert after");
    insertAfterButton.setFocusable(false);
    insertAfterButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        insertAfterButtonActionPerformed(evt);
      }
    });
    
    add(insertAfterButton, new com.jgoodies.forms.layout.CellConstraints(6, 8, 1, 1, com.jgoodies.forms.layout.CellConstraints.DEFAULT, com.jgoodies.forms.layout.CellConstraints.DEFAULT, new java.awt.Insets(0, 0, 0, 0)));
    
    moveUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/berlios/nblayoutpack/formlayout/resources/moveup.png")));
    moveUpButton.setToolTipText("Move up");
    moveUpButton.setFocusable(false);
    add(moveUpButton, new com.jgoodies.forms.layout.CellConstraints(4, 10, 1, 1, com.jgoodies.forms.layout.CellConstraints.DEFAULT, com.jgoodies.forms.layout.CellConstraints.DEFAULT, new java.awt.Insets(0, 0, 0, 0)));
    
    moveDownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/berlios/nblayoutpack/formlayout/resources/movedown.png")));
    moveDownButton.setToolTipText("Move down");
    moveDownButton.setFocusable(false);
    add(moveDownButton, new com.jgoodies.forms.layout.CellConstraints(4, 12, 1, 1, com.jgoodies.forms.layout.CellConstraints.DEFAULT, com.jgoodies.forms.layout.CellConstraints.DEFAULT, new java.awt.Insets(0, 0, 0, 0)));
    
    mergeUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/berlios/nblayoutpack/formlayout/resources/mergeup.png")));
    mergeUpButton.setToolTipText("Merge up");
    mergeUpButton.setActionCommand("mergeUp");
    mergeUpButton.setFocusable(false);
    mergeUpButton.setEnabled(false);
    add(mergeUpButton, new com.jgoodies.forms.layout.CellConstraints(6, 10, 1, 1, com.jgoodies.forms.layout.CellConstraints.DEFAULT, com.jgoodies.forms.layout.CellConstraints.DEFAULT, new java.awt.Insets(0, 0, 0, 0)));
    
    mergeDownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/berlios/nblayoutpack/formlayout/resources/mergedown.png")));
    mergeDownButton.setToolTipText("Merge down");
    mergeDownButton.setActionCommand("mergeDown");
    mergeDownButton.setFocusable(false);
    mergeDownButton.setEnabled(false);
    add(mergeDownButton, new com.jgoodies.forms.layout.CellConstraints(6, 12, 1, 1, com.jgoodies.forms.layout.CellConstraints.DEFAULT, com.jgoodies.forms.layout.CellConstraints.DEFAULT, new java.awt.Insets(0, 0, 0, 0)));
    
  }//GEN-END:initComponents

  private void layoutTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_layoutTableKeyPressed
    int keyCode = evt.getKeyCode();
    int modifiers = evt.getModifiers();
    if((keyCode == KeyEvent.VK_SPACE) && (modifiers == 0)){
      specField.requestFocusInWindow();
      specField.selectAll();
    }
    if((keyCode == KeyEvent.VK_DELETE) && (modifiers == 0)){
      delete(layoutTable.getSelectedRow());
    }
  }//GEN-LAST:event_layoutTableKeyPressed

  private void specFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specFieldActionPerformed
    replace(layoutTable.getSelectedRow());
  }//GEN-LAST:event_specFieldActionPerformed

  private void insertAfterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertAfterButtonActionPerformed
    insert(layoutTable.getSelectedRow(), 1);
  }//GEN-LAST:event_insertAfterButtonActionPerformed

  private void insertBeforeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertBeforeButtonActionPerformed
    insert(layoutTable.getSelectedRow(), 0);
  }//GEN-LAST:event_insertBeforeButtonActionPerformed

  private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
    delete(layoutTable.getSelectedRow());
  }//GEN-LAST:event_deleteButtonActionPerformed

  private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
    insert(0, layoutTableModel.getData().length);
  }//GEN-LAST:event_addButtonActionPerformed

  protected void insert(int position, int delta){
    String spec = specField.getText();
    try{
      context.checkSpecification(spec);
    }
    catch(Exception e){
      specField.requestFocusInWindow();
      return;
    }
    ArrayList list = new ArrayList(Arrays.asList(layoutTableModel.getData()));
    list.add(position + delta, spec);
    layoutTableModel.setData((String[])list.toArray(new String[list.size()]));
    layoutTable.getSelectionModel().setSelectionInterval(position + delta, position + delta);
    specField.requestFocusInWindow();
    specField.selectAll();
  }
  
  protected void replace(int position){
    if(position < 0){
      insert(0, layoutTableModel.getData().length);
      return;
    }
    String spec = specField.getText();
    try{
      context.checkSpecification(spec);
    }
    catch(Exception e){
      specField.requestFocusInWindow();
      return;
    }
    String[] data = layoutTableModel.getData();
    data[position] = spec;
    layoutTableModel.setData(data);
    layoutTable.getSelectionModel().setSelectionInterval(position, position);
    specField.requestFocusInWindow();
    specField.selectAll();
  }
  
  protected void delete(int position){
    ArrayList list = new ArrayList(Arrays.asList(layoutTableModel.getData()));
    list.remove(position);
    String[] data = (String[])list.toArray(new String[list.size()]);
    layoutTableModel.setData(data);
    int selRow = Math.min(position, data.length - 1);
    layoutTable.getSelectionModel().setSelectionInterval(selRow, selRow);
    specField.requestFocusInWindow();
    specField.selectAll();
  }
  
  public void updateData(){
    String value = context.getValue();
    layoutTableModel.setData(value.split(","));
    updateButtons();
  }
  
  public void updateButtons(){
    int selRow = layoutTable.getSelectedRow();
    insertBeforeButton.setEnabled(selRow >= 0);
    insertAfterButton.setEnabled(selRow >= 0);
    deleteButton.setEnabled(selRow >= 0);
    moveUpAction.setEnabled(selRow > 0);
    moveDownAction.setEnabled((selRow >= 0) && (selRow < layoutTableModel.getRowCount() - 1));
  }
    
  /**
   * Getter for property context.
   * @return Value of property context.
   */
  public ColumnRowCustomizerContext getContext(){
    return context;
  }
  
  /**
   * Setter for property context.
   * @param context New value of property context.
   */
  public void setContext(ColumnRowCustomizerContext context){
    this.context = context;
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addButton;
  private javax.swing.JButton deleteButton;
  private javax.swing.JButton insertAfterButton;
  private javax.swing.JButton insertBeforeButton;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTable layoutTable;
  private javax.swing.JButton mergeDownButton;
  private javax.swing.JButton mergeUpButton;
  private javax.swing.JButton moveDownButton;
  private javax.swing.JButton moveUpButton;
  private javax.swing.JTextField specField;
  private javax.swing.JLabel specLabel;
  // End of variables declaration//GEN-END:variables
  
  private class LayoutTableModel extends AbstractTableModel{

    private String[] layoutData;
    
    void setData(String[] data){
      layoutData = data;
      fireTableDataChanged();
//      String customizerValue = getCustomizerValue();
//      if(!customizerValue.equalsIgnoreCase(getValue())){
//        setValue(customizerValue);
//      }
    }
    
    String[] getData(){
      return layoutData;
    }
    
    // --------
    
    public int getRowCount(){
      return layoutData == null ? 0 : layoutData.length;
    }
    
    public int getColumnCount(){
      return 2;
    }
    
    public Object getValueAt(int row, int column){
      switch (column){
        case 0: return new Integer(row + 1);
        case 1: return layoutData[row];
      }
      throw new ArrayIndexOutOfBoundsException();
    }
    
    public Class getColumnClass(int column){
      switch (column) {
        case 0: return Integer.class;
        case 1: return String.class;
      }
      throw new ArrayIndexOutOfBoundsException();
    }
    
    public String getColumnName(int column){
      switch (column){
        case 0:
        case 1: return "";
      }
      throw new ArrayIndexOutOfBoundsException();
    }
  }

  private class TableListener implements ListSelectionListener{

    public void valueChanged(ListSelectionEvent e){
      int selRow = layoutTable.getSelectedRow();
      if(selRow < 0){
        specField.setText("");
      }
      else{
        specField.setText(layoutTableModel.getData()[selRow]);
      }
      updateButtons();
    }

  }

  private class MoveUpAction extends AbstractAction{

    public MoveUpAction(){
      putValue(Action.SMALL_ICON, new javax.swing.ImageIcon(getClass().getResource("/de/berlios/nblayoutpack/formlayout/resources/moveup.png")));
      putValue(Action.SHORT_DESCRIPTION, "Move up");
    }

    public void actionPerformed(ActionEvent e){
      int selRow = layoutTable.getSelectedRow();
      String[] data = layoutTableModel.getData();
      String temp = data[selRow];
      data[selRow] = data[selRow - 1];
      data[selRow - 1] = temp;
      layoutTableModel.setData(data);
      layoutTable.getSelectionModel().setSelectionInterval(selRow - 1, selRow - 1);
      layoutTable.requestFocusInWindow();
    }

  }

  private class MoveDownAction extends AbstractAction{

    public MoveDownAction(){
      putValue(Action.SMALL_ICON, new javax.swing.ImageIcon(getClass().getResource("/de/berlios/nblayoutpack/formlayout/resources/movedown.png")));
      putValue(Action.SHORT_DESCRIPTION, "Move down");
    }

    public void actionPerformed(ActionEvent e){
      int selRow = layoutTable.getSelectedRow();
      String[] data = layoutTableModel.getData();
      String temp = data[selRow];
      data[selRow] = data[selRow + 1];
      data[selRow + 1] = temp;
      layoutTableModel.setData(data);
      layoutTable.getSelectionModel().setSelectionInterval(selRow + 1, selRow + 1);
      layoutTable.requestFocusInWindow();
    }

  }

}
